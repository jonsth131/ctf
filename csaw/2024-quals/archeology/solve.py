#!/usr/bin/env python3

sbox = [
    0x48, 0x5C, 0xBC, 0x97, 0x81, 0x91, 0x60, 0xAD, 0x94, 0xCB, 0x92, 0x39, 0x1A, 0x0F, 0x30, 0x2D,
    0x45, 0xDE, 0x14, 0xA2, 0x08, 0x57, 0xB6, 0xAE, 0x76, 0x8E, 0x87, 0x15, 0x0C, 0xE7, 0x62, 0xC8,
    0x58, 0x29, 0x6D, 0xC9, 0xA7, 0xBE, 0x04, 0x49, 0x05, 0xFA, 0x75, 0x9F, 0xFD, 0x95, 0xBB, 0x5B,
    0x79, 0xBF, 0xDA, 0xEB, 0x21, 0x9B, 0xA5, 0x82, 0x3A, 0x3E, 0xB9, 0x99, 0xF0, 0xF5, 0x6B, 0x06,
    0xFC, 0xAF, 0xF2, 0xB0, 0x78, 0x86, 0xCF, 0xD4, 0x83, 0x59, 0x00, 0x4A, 0xB5, 0xFE, 0xAB, 0x3D,
    0xC7, 0x8C, 0xE3, 0xC3, 0xE5, 0x03, 0x5A, 0x1D, 0x9D, 0x1F, 0x0A, 0x56, 0xC0, 0xBA, 0x43, 0x25,
    0x77, 0x24, 0x7C, 0xA6, 0xDF, 0xF1, 0x4B, 0x44, 0xFF, 0x4C, 0xAA, 0xC1, 0x69, 0xF9, 0x38, 0x88,
    0x9A, 0xA4, 0xE6, 0x10, 0xDC, 0xEA, 0x68, 0x8D, 0x5F, 0x63, 0xBD, 0x8B, 0xF3, 0x7E, 0xDB, 0x73,
    0x5D, 0x65, 0x67, 0xA1, 0x72, 0xD8, 0xB1, 0x1B, 0x9E, 0x84, 0x16, 0x32, 0xE1, 0xF4, 0xEF, 0x93,
    0xAC, 0x74, 0x36, 0x8F, 0xCC, 0x61, 0x0D, 0x35, 0x12, 0xDD, 0x4E, 0xC4, 0x64, 0x3F, 0x09, 0x70,
    0x2A, 0xFB, 0xC5, 0x85, 0x3B, 0x1C, 0x50, 0x19, 0xD5, 0xE9, 0x47, 0x0B, 0xE2, 0xCA, 0xC6, 0xF7,
    0xB2, 0xD6, 0xF8, 0x11, 0x54, 0x6E, 0x90, 0xC2, 0xEC, 0x96, 0x51, 0xD7, 0xE8, 0x31, 0x80, 0x7D,
    0x18, 0x34, 0xB7, 0x02, 0xA0, 0x7A, 0xB3, 0xD0, 0x46, 0x66, 0x37, 0x1E, 0x7B, 0x42, 0x6C, 0x17,
    0xD9, 0x33, 0x2B, 0x22, 0xCE, 0xA9, 0x7F, 0xB4, 0x07, 0x6A, 0x41, 0x40, 0x26, 0x2F, 0xA8, 0xCD,
    0x71, 0xB8, 0x53, 0x13, 0x5E, 0xF6, 0xE0, 0x52, 0x4F, 0x6F, 0xE4, 0x89, 0x3C, 0x9C, 0xA3, 0x8A,
    0x4D, 0x28, 0x0E, 0xD3, 0xD2, 0x98, 0xEE, 0x2C, 0x2E, 0xED, 0x27, 0x20, 0x01, 0x23, 0x55, 0xD1
]


def encrypt(input):
    def washing_machine(a1, a2):
        v3 = a1[0]
        for i in range(1, a2):
            v5 = v3 ^ a1[i]
            a1[i] = v5
            v3 = v5
        for j in range(a2 // 2):
            v4 = a1[j]
            a1[j] = a1[a2 - j - 1]
            a1[a2 - j - 1] = v4
    
    def encrypt_char(value, idx):
        v18 = [0xaa, 0xbb, 0xcc, 0xdd, 0xee]
        for i in range(10):
            xor_val = v18[(10 * idx + i) % 5]
            value = ((value << (8 - 3)) | (value >> 3)) & 0xff
            value = sbox[value]
            value ^= xor_val
            value = ((value >> (8 - 3)) | (value << 3)) & 0xff
        return value

    washing_machine(input, len(input))
    encrypted = [encrypt_char(input[i], i) for i in range(len(input))]
    washing_machine(encrypted, len(encrypted))

    with open("hieroglyphs.txt", "r") as f:
        data = f.readlines()
        return "".join([data[x].replace("\n", "") for x in encrypted])

def decrypt(input):
    def reverse_washing_machine(a1, a2):
        for j in range(a2 // 2):
            v4 = a1[j]
            a1[j] = a1[a2 - j - 1]
            a1[a2 - j - 1] = v4

        v3 = a1[0]
        for i in range(1, a2):
            v5 = a1[i]
            a1[i] = v5 ^ v3
            v3 = v5

    def decrypt_char(value, idx, inv_sbox):
        v18 = [0xaa, 0xbb, 0xcc, 0xdd, 0xee]
        for i in reversed(range(10)):
            xor_val = v18[(10 * idx + i) % 5]
            value = ((value >> 3) | (value << (8 - 3))) & 0xff
            value ^= xor_val
            value = inv_sbox[value]
            value = ((value << 3) | (value >> (8 - 3))) & 0xff
        
        return value

    inv_sbox = [0] * len(sbox)
    for i in range(len(sbox)):
        inv_sbox[sbox[i]] = i

    with open("hieroglyphs.txt", "r") as f:
        data = f.readlines()
        data = [x.replace("\n", "") for x in data]
        input = [data.index(x) for x in input]

    reverse_washing_machine(input, len(input))
    decrypted = [decrypt_char(input[i], i, inv_sbox) for i in range(len(input))]
    reverse_washing_machine(decrypted, len(decrypted))

    return "".join([chr(x) for x in decrypted])


def main():
    data = "test"
    input = list(map(ord, data))
    encrypted = encrypt(input)
    decrypted = decrypt(encrypted)

    assert data == decrypted

    with open("message.txt", "r") as f:
        data = f.readline().replace("\n", "")
        decrypted = decrypt(data)
        print(decrypted)


if __name__ == "__main__":
    main()