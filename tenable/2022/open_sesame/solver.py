#!/usr/bin/env python3

from z3 import *

def printModel(model):
    found = []

    for idx in range(0, length):
        strVal = str(model[flag[idx]])
        found.append(chr(int(strVal)))

    print(''.join(found))

length = 0x22

s = Solver()
flag = [BitVec(f"flag_{i}", 8) for i in range(0, length)]

s.add(flag[0x7] + flag[0xf] == 0xa3)
s.add(flag[0x1f] + flag[0xd] == 0xac)
s.add(flag[0x17] + flag[0x20] == 0xa9)
s.add(flag[0x14] + flag[0x11] == 0x97)
s.add(flag[0x1b] + flag[0xe] == 0x93)
s.add(flag[0x12] == 0x67)
s.add(flag[0x19] - flag[0xc] == -0xd)
s.add(flag[0xb] * flag[0xa] == 0xaf5)
s.add(flag[0x5] - flag[0x1a] == -0x9)
s.add(flag[0x1e] * flag[0x9] == 0x1f44)
s.add(flag[0x3] * flag[0x0] == 0x2698)
s.add(flag[0x1d] + flag[0x16] == 0xa7)
s.add(flag[0x18] - flag[0x4] == -0x48)
s.add(flag[0x10] + flag[0x1] == 0xcb)
s.add(flag[0x8] == 0x31)
s.add(flag[0x1c] - flag[0x2] == 0x4a)
s.add(flag[0x15] * flag[0x6] == 0x2b6b)
s.add(flag[0x13] + flag[0x21] == 0xc0)
s.add(flag[0x7] - flag[0xf] == 0x3d)
s.add(flag[0x1f] + flag[0xd] == 0xac)
s.add(flag[0x17] - flag[0x20] == 0x3b)
s.add(flag[0x14] + flag[0x11] == 0x97)
s.add(flag[0x1b] - flag[0xe] == 0xb)
s.add(flag[0x12] * flag[0x19] == 0x2639)
s.add(flag[0xc] - flag[0xb] == 0x35)
s.add(flag[0xa] - flag[0x5] == -0x38)
s.add(flag[0x1a] + flag[0x1e] == 0xb9)
s.add(flag[0x9] - flag[0x3] == 0xc)
s.add(flag[0x0] - flag[0x1d] == -0x18)
s.add(flag[0x16] == 0x30)
s.add(flag[0x18] * flag[0x4] == 0x19e1)
s.add(flag[0x10] == 0x6c)
s.add(flag[0x1] == 0x5f)
s.add(flag[0x8] + flag[0x1c] == 0xac)
s.add(flag[0x2] * flag[0x15] == 0x122f)
s.add(flag[0x6] * flag[0x13] == 0x2c55)
s.add(flag[0x21] == 0x5f)
s.add(flag[0x7] + flag[0xf] == 0xa3)
s.add(flag[0x1f] == 0x48)
s.add(flag[0xd] - flag[0x17] == -0xe)
s.add(flag[0x20] == 0x37)
s.add(flag[0x14] * flag[0x11] == 0x1386)
s.add(flag[0x1b] * flag[0xe] == 0x14fc)
s.add(flag[0x12] * flag[0x19] == 0x2639)
s.add(flag[0xc] * flag[0xb] == 0x1734)
s.add(flag[0xa] == 0x33)
s.add(flag[0x5] - flag[0x1a] == -0x9)
s.add(flag[0x1e] * flag[0x9] == 0x1f44)
s.add(flag[0x3] == 0x68)
s.add(flag[0x0] + flag[0x1d] == 0xd6)
s.add(flag[0x16] == 0x30)
s.add(flag[0x18] - flag[0x4] == -0x48)
s.add(flag[0x10] + flag[0x1] == 0xcb)
s.add(flag[0x8] + flag[0x1c] == 0xac)
s.add(flag[0x2] + flag[0x15] == 0x90)
s.add(flag[0x6] == 0x75)
s.add(flag[0x13] + flag[0x21] == 0xc0)
s.add(flag[0x7] == 0x70)
s.add(flag[0xf] + flag[0x1f] == 0x7b)
s.add(flag[0xd] * flag[0x17] == 0x2c88)
s.add(flag[0x20] * flag[0x14] == 0xa87)
s.add(flag[0x11] + flag[0x1b] == 0xb5)
s.add(flag[0xe] + flag[0x12] == 0xab)
s.add(flag[0x19] + flag[0xc] == 0xcb)
s.add(flag[0xb] * flag[0xa] == 0xaf5)
s.add(flag[0x5] - flag[0x1a] == -0x9)
s.add(flag[0x1e] - flag[0x9] == -0x2f)
s.add(flag[0x3] * flag[0x0] == 0x2698)
s.add(flag[0x4] == 0x7d)

if s.check() == unsat:
    print("No solution found")
    exit(1)

printModel(s.model())
